geocode("Penang")
library(ggmap)
geocode("Penang")
penang <- geocode("Penang")
penang
class(penang)
revgecode(penang)
revgeocode(penang)
revgeocode(as.numeric(penang))
revpenang <- revgeocode(as.numeric(penang))
revpenang
summary(revpenang)
penang
summary(penang)
geocode("Jalan BK5B/5A")
geocode("Jalan BK5B/5A, Bandar Kinrara 5B")
geocode("Bandar Kinrara 5B")
geocode("puchong")
shiny::runApp('Malaysia')
shiny::runApp('Malaysia')
shiny::runApp('Malaysia')
shiny::runApp('Malaysia')
shiny::runApp('Malaysia')
shiny::runApp('Malaysia')
shiny::runApp('Malaysia')
shiny::runApp('SenseAnalytics - v2')
shiny::runApp('SenseAnalytics-v2')
shiny::runApp('SenseAnalytics-v2')
shiny::runApp('SenseAnalytics-v2')
shiny::runApp('SenseAnalytics-v2')
shiny::runApp('SenseAnalytics-v2')
shiny::runApp('SenseAnalytics-v2')
shiny::runApp('SenseAnalytics-v2')
shiny::runApp('SenseAnalytics-v2')
shiny::runApp('SenseAnalytics-v2')
shiny::runApp('SenseAnalytics-v2')
shiny::runApp('SenseAnalytics-v2')
shiny::runApp('SenseAnalytics-v2')
shiny::runApp('SenseAnalytics-v2')
shiny::runApp('SenseAnalytics-v2')
shiny::runApp('SenseAnalytics-v2')
shiny::runApp('SenseAnalytics-v2')
shiny::runApp('SenseAnalytics-v2')
shiny::runApp('SenseAnalytics-v2')
shiny::runApp('SenseAnalytics-v2')
shiny::runApp('SenseAnalytics-v2')
shiny::runApp('SenseAnalytics-v2')
shiny::runApp('SenseAnalytics-v2')
shiny::runApp('SenseAnalytics-v2')
shiny::runApp('SenseAnalytics-v2')
shiny::runApp('SenseAnalytics-v2')
shiny::runApp('SenseAnalytics-v2')
shiny::runApp('SenseAnalytics-v2')
shiny::runApp('SenseAnalytics-v2')
shiny::runApp('SenseAnalytics-v2')
View(citiact)
unique(citiact$device)
unique(citiact_na$device)
shiny::runApp('SenseAnalytics-v2')
shiny::runApp('SenseAnalytics-v2')
shiny::runApp('SenseAnalytics-v2')
unique(citiact_na$device)
shiny::runApp('SenseAnalytics-v2')
shiny::runApp('SenseAnalytics-v2')
data(mtcars)
t<- cor(mtcars$mpg ~ mtcars$wt)
t <- cov(mtcars$mpg, mtcars$wt)
summary(t)
t
t<- cor(mtcars$mpg, mtcars$wt)
t
coef?
?coef
coef(lm(mtcars$mpg ~ mtcars$wt))
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y ~ x)
lm(y ~ x)$coef
lm(mtcars$mpg ~ mtcars$wt)
shiny::runApp('SenseAnalytics-v2')
data_subset <- citiact_na[citiact_na$device=="service@garbage",]
data_subset <- subset(data_subset, select=c(data_city, lat, lng))
data_freq <- as.data.frame(table(data_subset$data_city,data_subset$lng, data_subset$lat))
data_freq <- data_freq[data_freq$Freq > 0,]
data_freq$Var2 <- as.numeric(as.character(data_freq$Var2))
data_freq$Var3 <- as.numeric(as.character(data_freq$Var3))
s <- split(data_freq, data_freq$Var1)
is.factor((s))
is.factor(s)
is.list(s)
library(dplyr)
library(plyr)
df <- ldply(s, data.frame)
head(df)
nRow(df)
nrow(df)
nrow(data_freq)
data_mean <- lapply(s, function(x){
colMeans(x[,c("Var2","Var3")])
})
head(data_mean)
df <- ldply(data_mean, data.frame)
df
head(data_mean)
head(df)
data_mean
s
summary(s)
summary(df)
dim(s)
dim(df)
?dim
is.list(df)
is.list(s)
class(s)
class(s$Alai)
class(df)
head(Df)
head(df)
df <- as.data.frame.list(s)
df <- as.data.frame(s)
s
df <- as.data.frame.list(data_mean)
df
head(df)
View(df)
df <- as.data.frame(data_mean)
View(df)
df <- as.data.frame.matrix(data_mean)
df <- as.data.frame(data_mean)
names(df)
df <- t(data_mean)
df
View(df)
shiny::runApp('SenseAnalytics-v2')
shiny::runApp('SenseAnalytics-v2')
shiny::runApp('SenseAnalytics-v2')
shiny::runApp('SenseAnalytics-v2')
shiny::runApp('SenseAnalytics-v2')
shiny::runApp('SenseAnalytics-v2')
shiny::runApp('SenseAnalytics-v2')
shiny::runApp('SenseAnalytics-v2')
shiny::runApp('SenseAnalytics-v2')
head(df)
data_mean <- lapply(s, function(x){
colMeans(x[,c("Var2","Var3")])
})
head(data_mean)
df <- as.data.frame(data_mean)
df
df_frame <- as.data.frame(names(df))
head(df_frame)
df_frame$long <- df[1,]
df_frame$long <- df[,1]
df
df_frame$long <- df[,1]
df[,1]
df[,1]
df[1,]
head(df)
View(df)
df[1,1]
df[1,2]
df[1,3]
df[1,]
df_frame$long <- as.data.frame(df[1,])
df_frame <- long=df[1,]
df_frame <- df[1,]
df_frame
View(df_frame)
df_frame <- as.data.frame(names(df))
View(citiact_na)
df_frame$long <- NULL
View(df_frame)
df_frame$lat <- NULL
View(df_frame)
df_frame$long <- df[1,]
df_frame[,2] <- df[1,]
df_frame$lat <- 0
View(df_frame)
df <- as.data.frame(data_mean)
df_frame <- as.data.frame(names(df))
View(df_frame)
df_frame$long <- NULL
df_frame$lat <- NULL
View(df_frame)
df[1,1]
df[1,6]
df[1,100]
df_frame$long <- as.data.frame(df[1,])
data_frame$long
df_frame$long
View(df_frame)
df[2,]
temp <- df[1,]
temp
temp
View(temp)
df_frame[,2] <- df[1,]
unlist(df[1,])
temp <- unlist(df[1,])
temp <- as.data.frame(temp)
temp <- unlist(df)
temp <- as.data.frame(temp)
temp <- unlist(df[1,], df[2,])
temp <- as.data.frame(temp)
temp <- unlist(df[1,])
long <- unlist(df[1,])
lat <- unlist(df[2,])
long <- as.data.frame(unlist(df[1,]))
lat <- as.data.frame(unlist(df[2,]))
View(long)
View(lat)
names(long) <- "Long"
names(lat) <- "Lat"
View(long)
temp <- rbind(long, lat)
View(long)
library(UsingR)
data(diamond)
library(ggplot2)
g <- ggplot(diamond, aes(x=carat, y=price))
g <- g + xlab("Mass  (Carats)")
g <- g + ylab("Price (SIN $)")
g <- g + geom_point(size =6, colour="black", alpha=0.2)
g <- g + geom_point(size =5, colour="blue", alpha=0.2)
g <- g + geom_smooth(method = "lm", colour="black")
g
fit <- lm(price ~ carat, data=diamond)
coef(fit)
summary(fit)
coef(fit)[1]
coef(fit)
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
fit <- lm(y ~ x)
sd(resid(fit))
e <- resid(fit)
e
sd?
?sd
sd(e)
?resid
summary(fit)
summary(fit)$sigma
sqrt(summary(fit)$sigma)
sqrt(0.223)
0.4722^2
summary(fit)
library(UsingR)
data(mtcars)
fit <- lm(mtcars$mpg ~ mtcars$wt)
fit
summary(fit)
?confidence interval
fit <- lm(mtcars$mpg ~ mtcars$wt)
sumCoef <- summart(fit)$coefficients
sumCoef <- summary(fit)$coefficients
sumCoef
sumCoef[1,1] + c(-1,1) * qt(.975, df=fit$df)*sumCoef[1,2]
summary(fit)
sumCoef[2,1] + c(-1,1) * qt(.975, df=fit$df)*sumCoef[2,2]
help(mtcars)
fit <- lm(mtcars$wt ~ mtcars$mpg)
sumCoef <- summary(fit)$coefficients
sumCoef
sumCoef[1,1] + c(-1,1) * qt(.975, df=fit$df)*sumCoef[1,2]
sumCoef[2,1] + c(-1,1) * qt(.975, df=fit$df)*sumCoef[2,2]
library(swirl)
swirl()
cor(gpa_nor,gch_nor)
l_nor <- lm(gch ~ gpa)
l_nor <- lm(gch_nor ~ gpa_nor)
fit <- lm(child ~ parent, galton)
sqrt(fit$residuals)
sqrt(sum(fit$residuals^2) / (n-2))
summary(fit)$sigma
sqrt(deviance(fit)/(n-2))
mu <- mean(galton$child)
sTot <- sum((galton$child-mu)^2)
sRes <- sum((galton$child-fit)^2)
sRes <- sum((galton$child-))
sRes <- sum((galton$child-mu)^2)
sRes <- deviance(fit)
1 - sRes/sTot
summary(fit)$r.squared
cor(child~parent,galton)^2
(cor(child~parent,galton))^2
cor(child~parent,galton)
cor(child ~ parent,galton)
?
cor
cor(galton$child, galton$parent)
cor(galton$parent, galton$child)^2
clear
cor
library(UsingR)
data(mtcars)
fit <- lm(mtcars$mpg ~ mtcars$wt)
summary(fit)$coefficients
sumCoef <- summary(fit)$coefficients
sumCoef[1,1] + c(-1,1) * qt(.975, df=3000) * sumCoef[1,2]
fit$df.residual
fit$df
sumCoef[1,1] + c(-1,1) * qt(.975, df=fit$df.residual) * sumCoef[1,2]
sumCoef[2,1] + c(-1,1) * qt(.975, df=fit$df.residual) * sumCoef[2,2]
sumCoef[2,1] + c(-1,1) * qt(.975, df=3000) * sumCoef[2,2]
(sumCoef[2,1] + c(-1,1) * qt(.975, df=3000) * sumCoef[2,2])/1000
(sumCoef[2,1] + c(-1,1) * qt(.975, df=fit$rf) * sumCoef[2,2])/1000
(sumCoef[2,1] + c(-1,1) * qt(.975, df=fit$df.residual) * sumCoef[2,2])/1000
(sumCoef[2,1] + c(-1,1) * qt(.975, df=fit$df.residual) * sumCoef[2,2])
?predict
x <- mtcars$mpg
y <- mtcars$wt
x <- mtcars$wt
y <- mtcars$mpg
fit<-lm(x~y)
predict(fit, data.frame(x=mean(x)), "confidence")
predict(fit, data.frame(x=mean(x)), interval="confidence")
fit<-lm(y~x)
predict(fit, data.frame(x=mean(x)), interval="confidence")
predict(fit, data.frame(x=3000, interval="confidence")
)
predict(fit, data.frame(x=3000), interval="confidence")
x
y
predict(fit, data.frame(x=3), interval="confidence")
predict(fit, data.frame(x=3), interval="prediction")
predict(fit, data.frame(x=2), interval="confidence")
I(x/2)
x
x/2
fit2 <- lm(y~I(x/2))
tbl2 <- summary(fit)$coefficients
tbl2[2,1] + c(-1,1)*qt(.975,df=fit2$df.residual)*tbl2[2,2]
tbl2 <- summary(fit2)$coefficients
tbl2[2,1] + c(-1,1)*qt(.975,df=fit2$df.residual)*tbl2[2,2]
preD <- predict(fit, data.frame(x=2), interval="confidence")
preD
preD$lwr
preD[1,2]
(preD[1,2] + preD[1,3]) / 2
library(UsingR)
data(diamond)
library(ggplot2)
g <- ggplot(diamond, aes(x=carat, y=price))
g <- g + xlab("Mass  (Carats)")
g <- g + ylab("Price (SIN $)")
g <- g + geom_point(size =6, colour="black", alpha=0.2)
g <- g + geom_point(size =5, colour="blue", alpha=0.2)
g <- g + geom_smooth(method = "lm", colour="black")
g
myPlot <- function(beta){
y <- galton$child - mean(galton$child)
x <- galton$parent - mean(galton$parent)
freqData <- as.data.frame(table(x, y))
names(freqData) <- c("child", "parent", "freq")
plot(
as.numeric(as.vector(freqData$parent)),
as.numeric(as.vector(freqData$child)),
pch = 21, col = "black", bg = "lightblue",
cex = .15 * freqData$freq,
xlab = "parent",
ylab = "child"
)
abline(0, beta, lwd = 3)
points(0, 0, cex = 2, pch = 19)
mse <- mean( (y - beta * x)^2 )
title(paste("beta = ", beta, "mse = ", round(mse, 3)))
}
manipulate(myPlot(beta), beta = manipulate::slider(0.4, .8, step = 0.02))
library(UsingR)
data(galton)
library(reshape)
long <- melt(galton)
g <- ggplot(galton, aes(x=child, fill=variable))
g<- g + geom_histogram(fill="salmon",colour="black", binwidth=1)
g<- g+ geom_vline(xintercept = mean(galton$child), size=3)
#g <- g+facet_grid(.~variable)
g
library(UsingR)
library(ggplot2)
data(father.son)
y<- (father.son$sheight - mean(father.son$sheight)) / sd(father.son$sheight)
x<- (father.son$fheight - mean(father.son$fheight)) / sd(father.son$fheight)
rho <- cor(x,y)
g <- ggplot(data.frame(x=x,y=y), aes(x=x, y=y))
g <- g + geom_point(size = 6, colour= "black", alpha = 0.2)
g <- g + geom_point(size =4, colour = "salmon", alpha = 0.2)
g <- g + xlim(-4, 4) + ylim(-4,4)
g <- g + geom_abline(intercept = 0, slope =1)
g <- g + geom_vline(xintercept=0)
g <- g + geom_hline(yintercept = 0)
g <- g + geom_abline(intercept = 0, slope = rho, size=2)
g <- g + geom_abline(intercept=0, slope=1/rho, size = 2)
g
library(swirl)
swirl()
ones <- rep(1, nrow(galton))
lm(child ~ ones + parent -1, galton)
lm(child ~ parent, galton)
citation()
x <- c(100,110,112,115,117,116,118,120,121,120,117,123)
y<- c(5.5,5.8,6,5.9,6.2,6.3,6.5,6.6,6.4,6.5,6.7,6.8)
cor(x,y)
cov(x,y)
sd(x)
sd(y)
2.181818/(6.180983*0.396194)
library(rCharts)
data(mtcars)
plot(x=wt,y=mpg, data=mtcars)
summary(mmtcars)
summary(mtcars)
plot(x=mtcars$wt,y=mtcars$mpg)
rplot(x=mtcars$wt,y=mtcars$mpg)
rPlot(x=mtcars$wt,y=mtcars$mpg)
rPlot(x=wt,y=mpg,data=mtcars)
rPlot(wt~mpg,data=mtcars)
rPlot(wt~mpg,data=mtcars, type='point')
nPlot(mpg~wt, group='cyl',data=mtcars,type='scatterChart')
head(mtcars)
xAxis(axisLabel='Weight')
p1<-nPlot(mpg~wt, group='cyl',data=mtcars,type='scatterChart')
p1$xAxis(axisLabel='Weight')
p1
p1<-nPlot(mpg~wt, group='gear',data=mtcars,type='scatterChart')
p1
p1<-nPlot(mpg~wt, group='gear',data=mtcars,type='linechart')
p1
p1<-nPlot(mpg~wt, group='gear',data=mtcars,type='lineChart')
p1
p1<-nPlot(mpg~wt, group='gear',data=mtcars,type='pieChart')
p
p1
plot(mpg~wt,data=mtcars)
head(mtcars)
shiny::runApp('rchart-example')
shiny::runApp('rchart-example')
data(mtcars)
t.test(mtcars$mpg~mtcars$am, conf.level=0.95)
mtv <- lm(data=mtcars, mpg ~ .)
summary(mtv)
stepm <- step(lm(data=mtcars, mpg ~ .), trace=0)
summary(stepm)
finalm <- lm(data=mtcars, mpg ~ am:wt + am:qsec)
summary(finalm)
finalm <- lm(data=mtcars, mpg ~ factor(am):wt + factor(am):qsec)
summary(finalm)
?mtcars
fit <- lm(data=mtcars, mpg~cyl:wt)
summary(fit)
levels(mtcars$cyl)
unique(mtcars$cyl)
data(mtcars)
cyl8 <- subset(mtcars, select=c("mpg", "cyl"))
cyl8 <- subset(mtcars, select=c("mpg", "cyl==8"))
cyl <- subset(mtcars, select=c("mpg", "cyl==8"))
cyl <- subset(mtcars, select=c("mpg", "cyl"))
cyl
cyl$cyl <- as.factor(cyl$cyl)
levels(cyl$cyl)
summary(lm(data=cyl, mpg~cyl))
cyl2 <- relevel(cyl$cyl, "8")
cyl2
summary(lm(data=cyl, mpg~cyl2))
summary(lm(data=cyl, mpg~cyl2-2))
mtcars$cyl <- factor(mtcars$cyl)
mtcars$cyl <- as.factor(mtcars$cyl)
mtcars$am <- as.factor(mtcars$am)
levels(mtcars$am) <- c("auto", "manual")
summary(lm(data=mtcars, mpg~cyl + wt))
summary(lm(data=mtcars, mpg~cyl + wt))$coef
summary(lm(data=mtcars, mpg~cyl))$coef
summary(lm(data=mtcars, mpg~cyl))$adj.r.squared
summary(lm(data=mtcars, mpg~cyl + wt))$adj.r.squared
dataset(Heart)
data(Heart)
library(MASS)
?shuttle
shuttle$use.binary <- as.integer((shuttle$use == "auto"))
fit <- glm(use.binary ~ wind -1, data=shuttle, family = binomial)
summary(fit)$coef
unname(exp(coef(fit))[1]/exp(coef(fit))[2])
fit <- glm(use.binary ~ wind+magn-1, data=shuttle, family = binomial)
summary(fit)$coef
exp(coef(fit))
exp(cbind(OddsRatio=coef(fit), confint(fit)))
1.4384/1.4852
fit <- glm(count ~ factor(spray)-1, family="poisson", data=InsectSprays)
summary(fit)
log(10)
2.7632 - log(10)
library(swirl)
swirl()
ones <- rep(1, nrow(galton))
lm(child ~ ones + parent -1, galton)
lm(child ~ parent, galton)
library(kernlab)
head(spam)
load(spam)
data(spam)
head(spam)
prediction <- ifelse(spam$your > 0.5, "spam", "nonspam")
prediction
table(prediction)
table(prediction,spam$type)
spam$type
table(prediction)
table(prediction,spam$type)
setwd("F:/Course/GitHub/Practical Machine Learning")
---
